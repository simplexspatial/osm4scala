(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{77:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),o=(a(0),a(90)),s={title:"Performance"},i={unversionedId:"performance",id:"performance",isDocsHomePage:!1,title:"Performance",description:"Performance executed on 2016. Newer versions and newer hardware will give you even better!!!",source:"@site/docs/performance.mdx",slug:"/performance",permalink:"/osm4scala/docs/performance",editUrl:"https://github.com/simplexspatial/osm4scala/edit/master/website/docs/performance.mdx",version:"current",sidebar:"docs",previous:{title:"Scala library",permalink:"/osm4scala/docs/standalone-scala-library"},next:{title:"Contributing",permalink:"/osm4scala/docs/contributing"}},l=[{value:"One thread performance.",id:"one-thread-performance",children:[]},{value:"Multi-thread performance.",id:"multi-thread-performance",children:[{value:"Counter Parallel using Scala Future.traverse Source.",id:"counter-parallel-using-scala-futuretraverse-source",children:[]},{value:"Counter Parallel using AKKA Source.",id:"counter-parallel-using-akka-source",children:[]},{value:"Counter Concurrent examples comparison.",id:"counter-concurrent-examples-comparison",children:[]}]}],c={toc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Performance executed on 2016. Newer versions and newer hardware will give you even better!!!"))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The performance here is related to the Scala library. Spark Connector is based in this library, but allows distributed\ndeserialization plus other optimizations, so performance can be escalated horizontally."))),Object(o.b)("p",null,"Laptop specifications used to execute testing and performance comparison:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Ubuntu 16.04.1 LTS Desktop / 64bits\nIntel(R) Core(TM) i7-4712HQ CPU @ 2.30GHz\n2x8GiB SODIMM DDR3 Synchronous 1600 MHz (0.6 ns)\n512GB SAMSUNG SSD\n")),Object(o.b)("h2",{id:"one-thread-performance"},"One thread performance."),Object(o.b)("p",null,"To have more representative performance metrics, all metrics in this section are using only one thread."),Object(o.b)("p",null,"I'm going to use a Primitives Counter application, that well count the number of primitives in a file with the possibility of\nfiltering by primitive type. The ",Object(o.b)("a",{parentName:"p",href:"https://github.com/simplexspatial/osm4scala/tree/master/examples/counter/src/main/scala/com/acervera/osm4scala/examples/counter/Counter.scala"},"source code"),"."),Object(o.b)("p",null,"In all cases, because the streaming nature of the library, ",Object(o.b)("strong",{parentName:"p"},"the use of memory is negligible"),", keeping no more than one block (32MB)\nof memory per iteration."),Object(o.b)("p",null,"About the performance:"),Object(o.b)("p",null,"For example, it expends only ",Object(o.b)("strong",{parentName:"p"},"32 seconds to iterate over near of 70 millions")," of elements that compose Spain.\nBelow the result of few executions of the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/simplexspatial/osm4scala/tree/master/examples/counter/src/main/scala/com/acervera/osm4scala/examples/counter/Counter.scala"},"Primitives Counter Example")," available in the code."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Found [67,976,861] primitives in /home/angelcervera/projects/osm/spain-latest.osm.pbf in 32.44 sec.\nFound [4,839,505] primitives of type [Way] in /home/angelcervera/projects/osm/spain-latest.osm.pbf in 31.72 sec.\nFound [63,006,432] primitives of type [Node] in /home/angelcervera/projects/osm/spain-latest.osm.pbf in 32.70 sec.\nFound [130,924] primitives of type [Relation] in /home/angelcervera/projects/osm/spain-latest.osm.pbf in 32.66 sec.\n")),Object(o.b)("p",null,"Other example, iterate over the ",Object(o.b)("strong",{parentName:"p"},"full planet (near of 4,000 millions of elements on August 2016), 40 minutes"),", reading the 36GB file from an USB3 drive."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Found [3,976,885,170] primitives in /media/angelcervera/My Passport/osm/planet-latest.osm.pbf in 2,566.11 sec.\n")),Object(o.b)("p",null,"The other example, ",Object(o.b)("a",{parentName:"p",href:"https://github.com/simplexspatial/osm4scala/tree/master/osm4scala/examples/tagsextraction/src/main/scala/com/acervera/osm4scala/examples/tagsextraction/TagExtraction.scala"},"Tag Extraction Example"),"\nexpends only 42 seconds to extract the list of all unique tags from the Spain pbf."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Found [4,166] different tags in /home/angelcervera/projects/osm/spain-latest.osm.pbf. List stored in /home/angelcervera/projects/osm/spain-latest.tags.txt. Time to process: 39.22 sec.\nFound [2,451] different tags in primitives of type [Way] in /home/angelcervera/projects/osm/spain-latest.osm.pbf. List stored in /home/angelcervera/projects/osm/spain-latest.tags.txt. Time to process: 33.47 sec.\n")),Object(o.b)("h2",{id:"multi-thread-performance"},"Multi-thread performance."),Object(o.b)("p",null,"In the following examples, we are going to see different ways to process in blocks in parallel. But to be able to run more\ncomplex analysis and transformations, the clear recommendation is go with the ",Object(o.b)("a",{parentName:"p",href:"/osm4scala/docs/spark-connector"},"Spark Connector"),"."),Object(o.b)("h3",{id:"counter-parallel-using-scala-futuretraverse-source"},"Counter Parallel using Scala Future.traverse ",Object(o.b)("a",{parentName:"h3",href:"https://github.com/simplexspatial/osm4scala/tree/master/examples/counter-parallel/src/main/scala/com/acervera/osm4scala/examples/counterparallel/CounterParallel.scala"},"Source"),"."),Object(o.b)("p",null,"Because the library implements different iterator to be able to iterate over blocks and entities, it is really simple to use it in a parallel way."),Object(o.b)("p",null,"This example show how to process data in parallel, using only Scala Future.traverse"),Object(o.b)("p",null,"This is the simple way, but has a big problem: Futures.traverse create ",Object(o.b)("strong",{parentName:"p"},"sequentially")," one Future per element in the\nIterator and parallel is executing them. That means put all block in memory.\n",Object(o.b)("strong",{parentName:"p"},"This is ok if you have enough memory")," (16GB is enough to manage all USA or Europe) but if you want process the full\nplanet or a heavy memory consume process per block, you will need more than that. My recommendation is go with the ",Object(o.b)("a",{parentName:"p",href:"/osm4scala/docs/spark-connector"},"Spark Connector"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"  val counter = new AtomicLong()\n  def count(pbfIS: InputStream): Long = {\n    val result = Future.traverse(BlobTupleIterator.fromPbf(pbfIS))(tuple => Future {\n      counter.addAndGet( count(tuple._2) )\n    })\n    Await.result(result, Duration.Inf)\n    counter.longValue()\n  }\n")),Object(o.b)("h3",{id:"counter-parallel-using-akka-source"},"Counter Parallel using AKKA ",Object(o.b)("a",{parentName:"h3",href:"https://github.com/simplexspatial/osm4scala/tree/master/examples/counter-akka/src/main/scala/com/acervera/osm4scala/examples/counterakka"},"Source"),"."),Object(o.b)("p",null,"This example show how to process data in parallel, using AKKA"),Object(o.b)("p",null,"The implementation is not complex at all, but it is necessary a little (a really little bit) of knowledge about AKKA to understand it.\nTwo big advantage respect the Future.traverse version:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The memory used depends directly on the number of actor used, so you can process the full planet with no more of few GB of RAM."),Object(o.b)("li",{parentName:"ul"},"It is possible distribute the execution in different nodes.")),Object(o.b)("h3",{id:"counter-concurrent-examples-comparison"},"Counter Concurrent examples comparison."),Object(o.b)("h4",{id:"ireland-and-north-ireland"},"Ireland and North Ireland"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Entities: 15,751,251"),Object(o.b)("li",{parentName:"ul"},"Counter (One thread): 8.91 sec."),Object(o.b)("li",{parentName:"ul"},"Concurrent Future.traverse: 5.31 sec."),Object(o.b)("li",{parentName:"ul"},"Concurrent AKKA 4 cores: 5.89 sec.")),Object(o.b)("h4",{id:"spain"},"Spain"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Entities: 67,976,861"),Object(o.b)("li",{parentName:"ul"},"Counter (One thread): 35.67 sec."),Object(o.b)("li",{parentName:"ul"},"Concurrent Future.traverse: 17.33 sec."),Object(o.b)("li",{parentName:"ul"},"Concurrent AKKA 4 cores: 16.82 sec.")),Object(o.b)("h4",{id:"north-america-usa-and-canada"},"North America (USA and Canada)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Entities: 944,721,636"),Object(o.b)("li",{parentName:"ul"},"Counter (One thread): 514 sec. / 8.5 min."),Object(o.b)("li",{parentName:"ul"},"Concurrent Future.traverse: 211 sec. / 3.5  min. (-XX:-UseGCOverheadLimit -Xms14g)"),Object(o.b)("li",{parentName:"ul"},"Concurrent AKKA 4 cores: 256.70 sec. / 4.27 min. -> ",Object(o.b)("strong",{parentName:"li"},"But only uses 4 cores and 128M of RAM"),', so can play "Solitaire" while you wait.')))}p.isMDXComponent=!0}}]);